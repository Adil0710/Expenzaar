// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  salary        Float
  expenses      Expense[]
  categories    Category[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Expense {
  id            String   @id @default(uuid())
  userId        String
  categoryId    String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  amount        Float
  isOverLimit   Boolean   @default(false)  // Tracks whether this expense exceeds the category limit
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id            String   @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  limit         Float     @default(0)     // Default limit as zero to indicate no limit
  expenses      Expense[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, name]) // Ensures each user canâ€™t create duplicate category names
}
